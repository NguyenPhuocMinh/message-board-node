'use strict';

const Promise = require('bluebird');
const lodash = require('lodash');
const requestId = require('../supports/requestId');
const loggingFactory = require('winrow-logger');
const validator = require('../supports/validator');
const handleError = require('../middleware/handleError');
const { get, isEmpty, isFunction } = lodash;

function handle(params) {
  const {
    req,
    res,
    input,
    output,
    service_method
  } = params;

  let argsInput = {};
  let argsOutput = {};

  const opts = {
    requestId: requestId,
    validator: validator,
    loggingFactory: loggingFactory,
  };

  if (input) {
    if (isFunction(input.transform)) {
      argsInput = input.transform(req, opts);
    }
  }

  return new Promise((resolve, reject) => {
    resolve(argsInput)
  })
    .then(args => {
      return service_method(args, opts);
    })
    .then(result => {
      if (output) {
        if (isFunction(output.transform)) {
          argsOutput = output.transform(result);
        }
      }
      return argsOutput;
    })
    .then(data => {
      const headers = get(data, 'headers');
      const body = get(data, 'body');
      if (isEmpty(headers) && !isEmpty(body)) {
        return res.status(200).send(body)
      }
      return res.status(200).set(headers).send(body);
    })
    .catch(err => {
      handleError(err, res);
    });
};

module.exports = handle;