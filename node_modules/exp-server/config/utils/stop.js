'use strict';

const Promise = require('bluebird');
const lodash = require('lodash');
const process = require('process');
const loggingFactory = require('winrow-logger');
const requestId = require('../supports/requestId');
const { isFunction } = lodash;
const { name, version } = require('../../package.json');

function StopServer(params) {
  const { server } = params;
  return new Promise(function (resolve, reject) {
    const timeOut = setTimeout(function () {
      reject();
    }, 3000);
    const serverClose = function () {
      if (server && isFunction(serverClose)) {
        server.removeListener('close', serverClose)
      }
    }

    server.on('close', serverClose)
    server.close(function (err) {
      clearTimeout(timeOut)
      resolve(err);
    });
    loggingFactory.warn(`Disconnect library ${name} version : ${version}`, {
      labelName: `[${name}]`,
      requestId: `${requestId}`
    });
    loggingFactory.warn(`The server has been stop`, {
      labelName: `[${name}]`,
      requestId: `${requestId}`
    });
  })
    .then(() => {
      process.exit(0);
    })
    .catch(err => {
      loggingFactory.error(`The Server Stop Has Error : ${err}`, {
        labelName: `[${name}]`,
        requestId: `${requestId}`
      });
      return Promise.reject(err)
    });
};

module.exports = StopServer;