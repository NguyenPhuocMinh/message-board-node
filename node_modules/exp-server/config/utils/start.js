'use strict';

const Promise = require('bluebird');
const loggingFactory = require('winrow-logger');
const requestId = require('../supports/requestId');
const { name, version } = require('../../package.json');

function StartServer(params = {}) {
  const { server, path_server, protocol, port_server, host_server } = params;
  return new Promise((resolve, reject) => {
    const serverInstance = server.listen(port_server, host_server, (err) => {
      if (err) {
        loggingFactory.error(`Start server has error :${err}`, {
          labelName: `[${name}]`,
          requestId: `${requestId}`
        })
        reject(err);
      };
      const port = serverInstance.address().port;
      const host = serverInstance.address().address;
      console.info('The server is running on %s://%s:%s', protocol, host, port);
      loggingFactory.debug(`Path server : ${path_server}`, {
        labelName: `[${name}]`,
        requestId: `${requestId}`
      });
      loggingFactory.info(`The server start with: ${protocol}://${host}:${port}${path_server}`, {
        labelName: `[${name}]`,
        requestId: `${requestId}`
      });
    });
    resolve(serverInstance);
  })
    .then(info => {
      loggingFactory.data(`Connect with library ${name} version : ${version} has complete`, {
        labelName: `[${name}]`,
        requestId: `${requestId}`
      });
      return info;
    })
    .catch(err => {
      loggingFactory.warn(`Start server has error : ${err}`, {
        labelName: `[${name}]`,
        requestId: `${requestId}`
      })
      return Promise.reject(err);
    });
};

module.exports = StartServer;