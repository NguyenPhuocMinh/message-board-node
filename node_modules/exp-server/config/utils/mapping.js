'use strict';

const Promise = require('bluebird');
const lodash = require('lodash');
const handle = require('../middleware/handleMapping');
const loggingFactory = require('winrow-logger');
const requestId = require('../supports/requestId');
const {
  get,
  isEmpty,
  isArray,
  toLower,
} = lodash;

function mapping(params = {}) {
  const { app, router, path_server, mappings } = params;

  return new Promise((resolve, reject) => {
    if (isEmpty(mappings)) {
      reject('mapping not found');
    }
    if (!isEmpty(mappings) && isArray(mappings)) {
      mappings.map(mapping => {
        const method = get(mapping, 'method')
        const pathName = get(mapping, 'pathName');
        const serviceName = get(mapping, 'serviceName');
        const methodName = get(mapping, 'methodName');
        const input = get(mapping, 'input') || {};
        const output = get(mapping, 'output') || {};
        const service_method = serviceName[methodName];

        if (isEmpty(method)) {
          reject('method not found');
        };

        return app.use(path_server, router[toLower(method)](pathName, (req, res) =>
          handle({ req, res, input, output, service_method })
        ));
      })
    }
    resolve(app);
  })
    .then(info => {
      loggingFactory.warn(`Connect mapping has complete`, {
        requestId: `${requestId}`
      })
      return info;
    })
    .catch(err => {
      loggingFactory.error(`Mapping has error : ${err}`, {
        requestId: `${requestId}`
      })
      return Promise.reject(err);
    });
};

module.exports = mapping;