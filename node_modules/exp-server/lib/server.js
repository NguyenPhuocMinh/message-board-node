'use strict';

const http = require('http');
const https = require('https');
const fs = require('fs');
const path = require('path');
const process = require('process');
const lodash = require('lodash');
const express = require('express');
const router = express.Router();
const logger = require('morgan');
const cors = require('cors');
const bodyParser = require('body-parser');
const startServer = require('../config/utils/start');
const stopServer = require('../config/utils/stop');
const connect = require('../config/utils/connect');
const disconnect = require('../config/utils/disconnect');
const mapping = require('../config/utils/mapping');
const lookup = require('../config/supports/lookup');
const returnCodes = require('../config/supports/returnCodes');
const slugifyString = require('../config/supports/slugifyString');
const dataStore = require('../config/utils/dataStore');
const { get } = lodash;

function Server(params = {}) {
  const app = express();
  // init server
  const { application } = params;
  const enable = get(application, 'enable');
  const path_server = get(application, 'pathServer');
  const connect_bridges = get(application, 'bridges.connect');
  const protocol = enable ? process.env.PROTOCOL || 'https' : 'http';
  const port_server = process.env.PORT || get(connect_bridges, 'serverInternees.port') || 8080;
  const host_server = process.env.HOST || get(connect_bridges, 'serverInternees.host') || '0.0.0.0';
  const connect_database = get(connect_bridges, 'mongoose.dataStore.connect_options');
  const host_mongoose = get(connect_database, 'host');
  const port_mongoose = get(connect_database, 'port');
  const name_mongoose = get(connect_database, 'name');
  const mappings = get(connect_bridges, 'mappingStore.mappings') || [];

  const options = {
    key: fs.readFileSync(path.resolve(__dirname, '../config/data', 'key.pem')),
    cert: fs.readFileSync(path.resolve(__dirname, '../config/data', 'cert.pem'))
  }

  const server = enable ? https.createServer(options, app) : http.createServer(app);

  app.use(cors());
  app.use(logger('dev'));
  app.use(bodyParser.json({ limit: '100mb' }));
  app.use(bodyParser.urlencoded({ limit: '100mb', extended: true }));
  app.use(express.static(path.join(__dirname, 'build')));
  app.use('/rest/api/images', express.static('images'));

  // start server
  this.start = function () {
    return startServer({ server, path_server, protocol, port_server, host_server });
  }
  // stop server
  this.stop = function () {
    return stopServer({ server });
  };
  // connect mongoose
  this.connect_mongoose = function () {
    return connect({ host_mongoose, port_mongoose, name_mongoose });
  };
  // disconnect mongoose
  this.disconnect_mongoose = function () {
    return disconnect({ host_mongoose, port_mongoose, name_mongoose });
  };
  // mapping api
  this.mappingStore = function () {
    return mapping({ app, router, path_server, mappings })
  };
};

exports = module.exports = new Server();

/*
* Expose prototypes
*/
exports.register = Server;
exports.require = lookup;
exports.dataStore = dataStore;
exports.slugifyString = slugifyString;
exports.returnCodes = returnCodes;
/*
* End Expose
*/